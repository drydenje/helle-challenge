---
---
<div id="container"></div>

<script type="module">

  import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

  /*
  {
        gameId: 2014021221,
        teamAbbrev: "MTL",
        homeRoadFlag: "R",
        gameDate: "2015-04-11",
        goals: 0,
        assists: 0,
        commonName: {
          default: "Canadiens",
        },
        opponentCommonName: {
          default: "Maple Leafs",
        },
        gamesStarted: 1,
        decision: "W",
        shotsAgainst: 22,
        goalsAgainst: 3,
        savePctg: 0.863636,
        shutouts: 0,
        opponentAbbrev: "TOR",
        pim: 0,
        toi: "64:50",
      },
  */

  const cleanGameLogs = (player) => {
    return player.gameLog
      .reverse()
      .map(game => {
        return {
          date: game.gameDate,
          gameNumber: player.gameLog.findIndex(a => a.gameId === game.gameId) + 1,
          opponent: game.opponentCommonName.default,
          homeRoadFlag: game.homeRoadFlag,
          goals: game.goals,
          assists: game.assists,
          shotsAgainst: game.shotsAgainst,
          goalsAgainst: game.goalsAgainst,
          savePctg: game.savePctg,
        }
      })
  }

  const addLine = (svg, player, x, y, colour) => {
      const line = d3.line()
        .x(d => x(d.gameNumber))
        .y(d => y(d.savePctg));

      svg.append("path")
        .datum(player)
        .attr('fill', 'none')
        .attr('stroke', colour)
        .attr('stoke-width', 1)
        .attr('d', line);
  }

  (async () => {
    try {
      const urls = [
        'http://localhost:8888/.netlify/functions/hellebuyck',
        'http://localhost:8888/.netlify/functions/price'
      ]
      const requests = urls.map((url) => fetch(url));
      const responses = await Promise.all(requests);
      const errors = responses.filter((response) => !response.ok);

      if (errors.length > 0) {
        throw errors.map((response) => Error(response.statusText));
      }

      const json = responses.map((response) => response.json());
      const data = await Promise.all(json);

      data.forEach((datum) => console.log(datum));

      // Declare the chart dimensions and margins.
      const width = 640;
      const height = 400;
      const marginTop = 20;
      const marginRight = 20;
      const marginBottom = 30;
      const marginLeft = 40;

      // Declare the x (horizontal position) scale.
      const x = d3.scaleLinear()
          .domain([0, 70])
          .range([marginLeft, width - marginRight]);

      // Declare the y (vertical position) scale.
      const y = d3.scaleLinear()
          .domain([0.700, 1.000])
          .range([height - marginBottom, marginTop]);

      // Create the SVG container.
      const svg = d3.create("svg")
          .attr("width", width)
          .attr("height", height);

      // Add the x-axis.
      svg.append("g")
          .attr("transform", `translate(0,${height - marginBottom})`)
          .call(d3.axisBottom(x));

      // Add the y-axis.
      svg.append("g")
          .attr("transform", `translate(${marginLeft},0)`)
          .call(d3.axisLeft(y));

      const helle = await cleanGameLogs(data[0]);
      const price = await cleanGameLogs(data[1]);
      addLine(svg, helle, x, y, 'steelblue');
      addLine(svg, price, x, y, 'red');

      // const line = d3.line()
      //   .x(d => x(d.gameNumber))
      //   .y(d => y(d.savePctg));

      // svg.append("path")
      //   .datum(helle)
      //   .attr('fill', 'none')
      //   .attr('stroke', 'steelblue')
      //   .attr('stoke-width', 1)
      //   .attr('d', line);

      // Append the SVG element.
      container.append(svg.node());
    }
    catch (error) {
      console.error(error);
    }

  })();

</script>

<style>
	#background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
		filter: blur(100px);
	}

	#container {
		font-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
		height: 100%;
	}

	main {
		height: 100%;
		display: flex;
		justify-content: center;
	}

	#hero {
		display: flex;
		align-items: start;
		flex-direction: column;
		justify-content: center;
		padding: 16px;
	}

	h1 {
		font-size: 22px;
		margin-top: 0.25em;
	}

	#links {
		display: flex;
		gap: 16px;
	}

	#links a {
		display: flex;
		align-items: center;
		padding: 10px 12px;
		color: #111827;
		text-decoration: none;
		transition: color 0.2s;
	}

	#links a:hover {
		color: rgb(78, 80, 86);
	}

	#links a svg {
		height: 1em;
		margin-left: 8px;
	}

	#links a.button {
		color: white;
		background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
		box-shadow:
			inset 0 0 0 1px rgba(255, 255, 255, 0.12),
			inset 0 -2px 0 rgba(0, 0, 0, 0.24);
		border-radius: 10px;
	}

	#links a.button:hover {
		color: rgb(230, 230, 230);
		box-shadow: none;
	}

	pre {
		font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas,
			'DejaVu Sans Mono', monospace;
		font-weight: normal;
		background: linear-gradient(14deg, #d83333 0%, #f041ff 100%);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		margin: 0;
	}

	h2 {
		margin: 0 0 1em;
		font-weight: normal;
		color: #111827;
		font-size: 20px;
	}

	p {
		color: #4b5563;
		font-size: 16px;
		line-height: 24px;
		letter-spacing: -0.006em;
		margin: 0;
	}

	code {
		display: inline-block;
		background:
			linear-gradient(66.77deg, #f3cddd 0%, #f5cee7 100%) padding-box,
			linear-gradient(155deg, #d83333 0%, #f041ff 18%, #f5cee7 45%) border-box;
		border-radius: 8px;
		border: 1px solid transparent;
		padding: 6px 8px;
	}

	.box {
		padding: 16px;
		background: rgba(255, 255, 255, 1);
		border-radius: 16px;
		border: 1px solid white;
	}

	#news {
		position: absolute;
		bottom: 16px;
		right: 16px;
		max-width: 300px;
		text-decoration: none;
		transition: background 0.2s;
		backdrop-filter: blur(50px);
	}

	#news:hover {
		background: rgba(255, 255, 255, 0.55);
	}

	@media screen and (max-height: 368px) {
		#news {
			display: none;
		}
	}

	@media screen and (max-width: 768px) {
		#container {
			display: flex;
			flex-direction: column;
		}

		#hero {
			display: block;
			padding-top: 10%;
		}

		#links {
			flex-wrap: wrap;
		}

		#links a.button {
			padding: 14px 18px;
		}

		#news {
			right: 16px;
			left: 16px;
			bottom: 2.5rem;
			max-width: 100%;
		}

		h1 {
			line-height: 1.5;
		}
	}
</style>
