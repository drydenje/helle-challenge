<style>

</style>
<div class="wrapper">
  <div id="container"></div>
</div>

<script type="module">

  import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

  /*
  {
        gameId: 2014021221,
        teamAbbrev: "MTL",
        homeRoadFlag: "R",
        gameDate: "2015-04-11",
        goals: 0,
        assists: 0,
        commonName: {
          default: "Canadiens",
        },
        opponentCommonName: {
          default: "Maple Leafs",
        },
        gamesStarted: 1,
        decision: "W",
        shotsAgainst: 22,
        goalsAgainst: 3,
        savePctg: 0.863636,
        shutouts: 0,
        opponentAbbrev: "TOR",
        pim: 0,
        toi: "64:50",
      },
  */

  const cleanGameLogs = (player) => {
    return player.gameLog
      // .reverse()
      .map(game => {
        return {
          date: game.gameDate,
          gameNumber: player.gameLog.findIndex(a => a.gameId === game.gameId) + 1,
          opponent: game.opponentCommonName.default,
          homeRoadFlag: game.homeRoadFlag,
          goals: game.goals,
          assists: game.assists,
          shotsAgainst: game.shotsAgainst,
          goalsAgainst: game.goalsAgainst,
          savePctg: game.savePctg,
          totalShotsAgainst: game.totalShotsAgainst,
          totalGoalsAgainst: game.totalGoalsAgainst,
          totalSavePercentage: game.totalSavePercentage
        }
      })
  }

  // Line generator
  const addLine = (svg, player, x, y, colour) => {
      const line = d3.line()
        .x(d => x(d.gameNumber))
        .y(d => y(d.totalSavePercentage)
        );

      svg.append("path")
        .datum(player)
        .attr('fill', 'none')
        .attr('stroke', colour)
        .attr('stoke-width', 500)
        .attr('d', line);
  }

  (async () => {
    try {
    
      const urls = [
        '/.netlify/functions/hellebuyck',
        '/.netlify/functions/price'
      ]
      const requests = urls.map((url) => fetch(url));
      const responses = await Promise.all(requests);
      const errors = responses.filter((response) => !response.ok);

      if (errors.length > 0) {
        throw errors.map((response) => Error(response.statusText));
      }

      const json = responses.map((response) => response.json());
      const data = await Promise.all(json);

      // data.forEach((datum) => console.log("Datum:", datum));

      
      const helle = await cleanGameLogs(data[0]);
      const price = await cleanGameLogs(data[1]);
      console.log("HELLE:", helle)
      console.log("PRICE:", price)

      // Declare the chart dimensions and margins.
      const margin = { top: 70, right: 30, bottom: 40, left: 80 };
      const width = 1200 - margin.left - margin.right;
      const height = 500 - margin.top - margin.bottom;
      
      const extent = d3.extent(price, d => d.gameNumber)

      // Declare the x (horizontal position) scale.
      const x = d3.scaleLinear()
        .range([0, width])
        .domain(extent)

      // Declare the y (vertical position) scale.
      const y = d3.scaleLinear()
        .range([height, 0])
        .domain([0.850, 1.000])

      // Create the SVG container.
      const svg = d3.select("#container")
        .append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform", `translate(${margin.left}, ${margin.top})`)

      // create tooltip div
      const tooltip = d3.select("body")
        .append("div")
        .attr("class", "tooltip");

      // Add the x-axis.
      svg.append("g")
        .attr("transform", `translate(0,${height})`)
        .style("font-size", "14px")
        .call(d3.axisBottom(x))
          // .tickValues([1, 2, 3, 5, 8, 13, 21])
        // .tickFormat(d => {
        //   return `${d}`;
        // })
        // remove the axis line and ticks
        .call(g => g.select(".domain").remove())
        .selectAll(".tick line")
        .style("stroke-opacity", 0)
      svg.selectAll(".tick text")
        .attr("fill", "#777");


      // Add the y-axis.
      svg.append("g")
        .style("font-size", "14px")
        .call(d3.axisLeft(y)
        // .tickValues([0.850, 0.900, 0.950, 1])
        .tickFormat(d => {
          return `${d.toFixed(3)}`;
        }))
        // remove the axis line and ticks
        .call(g => g.select(".domain").remove())
        .selectAll(".tick line")
        .style("stroke-opacity", 0)
        .selectAll(".tick text")
        .style("fill", "#777")
        .style("visibility", (d, i, nodes) => {
          if(i === 0) {
            return "hidden";
          } else {
            return "visible";
          }
        })

        // add vertical gridlines
        svg.selectAll("xGrid")
          .data(x.ticks())
          .join("line")
          .attr("x1", d => x(d))
          .attr("x2", d => x(d))
          .attr("y1", 0)
          .attr("y2", height)
          .attr("stroke", "#e0e0e0")
          .attr("stroke-width", .5);

        // add horizontal gridlines
        svg.selectAll("yGrid")
          .data(y.ticks())
          .join("line")
          .attr("x1", 0)
          .attr("x2", width)
          .attr("y1", d => y(d))
          .attr("y2", d => y(d))
          .attr("stroke", "#e0e0e0")
          .attr("stroke-width", .5)

        // add chart title
        svg.append("text")
          .attr("class", "chart-title")
          .attr("x", width / 2)
          .attr("y", 0 - (margin.top / 2))
          .attr("text-anchor", "middle")
          .attr("font-size", "24px")
          .attr("font-weight", "bold")
          .attr("font-family", "sans-serif")
          .text("Helle Challenge: Connor vs. Carey")

        // add Y-axis label
        svg.append("text")
          .attr("transform", "rotate(-90)")
          .attr("y", 0 - margin.left)
          .attr("x", 0 - (height / 2))
          .attr("dy", "1em")
          .style("text-anchor", "middle")
          .attr("font-size", "14px")
          .attr("fill", "#777")
          .attr("font-family", "sans-serif")
          .text("Save Percentage")

        // add X-axis label
        svg.append("text")
          .attr("class", "chart-title")
          .attr("x", width / 2)
          .attr("y", 0 + height + (margin.bottom ))
          .attr("text-anchor", "middle")
          .attr("font-size", "14px")
          .attr("fill", "#777")
          .attr("font-family", "sans-serif")
          .text("Games into season")

      // first attempt at solid constant line, not working
      const avg201415 = 0.911;
      const avg202425 = 0.895;

      svg.append("line")
        .attr("x1", 0)
        .attr("x2", width)
        .attr("y1", d => y(avg201415))
        .attr("y2", d => y(avg201415))
        .attr("stroke", "var(--montreal-red)")
        .attr("stroke-width", 1);
      
      svg.append("line")
        .attr("x1", 0)
        .attr("x2", width)
        .attr("y1", d => y(avg202425))
        .attr("y2", d => y(avg202425))
        .attr("stroke", "var(--winnipeg-blue)")
        .attr("stroke-width", 1);

      addLine(svg, helle, x, y, 'var(--winnipeg-blue)');
      addLine(svg, price, x, y, 'var(--montreal-red)');

      // add a circle element on the rendered line
      const circle = svg.append("circle")
        .attr("r", 0)
        .attr("fill", "var(--montreal-red)")
        .style("stroke", "white")
        .attr("opacity", 1)
        .style("pointer-events", "none");

      const circle2 = svg.append("circle")
        .attr("r", 0)
        .attr("fill", "var(--winnipeg-blue)")
        .style("stroke", "white")
        .attr("opacity", 1)
        .style("pointer-events", "none");

      const listeningRect = svg.append("rect")
        .attr("width", width)
        .attr("height", height);

      
        // Legend
        svg.append("circle")
          .attr("cx",800)
          .attr("cy",320)
          .attr("r", 6)
          .style("fill", "var(--montreal-red)");
        svg.append("text")
          .attr("x", 820)
          .attr("y", 320)
          .text("2014/15 - Carey Price")
          .style("font-size", "15px")
          .attr("alignment-baseline","middle");

        svg.append("circle")
          .attr("cx",800)
          .attr("cy",350)
          .attr("r", 6)
          .style("fill", "var(--winnipeg-blue)");
        svg.append("text")
          .attr("x", 820)
          .attr("y", 350)
          .text("2024/25 - Connor Hellebuyck")
          .style("font-size", "15px")
          .attr("alignment-baseline","middle");

        svg.append("text")
          .attr("x", 700)
          .attr("y", 250)
          .text("2014/15 Average Save Percentage")
          .style("font-size", "15px")
          .attr("alignment-baseline", "middle");


      listeningRect.on("mousemove", function (event) {
        const [xCoord] = d3.pointer(event, this);
        const bisectGameNumber = d3.bisector(d => d.gameNumber).left;
        const x0 = x.invert(xCoord);
        const i = bisectGameNumber(price, x0, 1);

        const d0 = price[i - 1];
        const d1 = price[i];
        const d = x0 - d0.gameNumber > d1.gameNumber - x0 ? d1 : d0;
        const xPos = x(d.gameNumber);
        const yPos = y(d.totalSavePercentage);
        
        // update the circle position
        circle.attr("cx", xPos)
        .attr("cy", yPos)

        // add transition for circle radius
          circle.transition()
            .duration(50)
            .attr("r", 5);
            
        let xPos2, yPos2, e;

        if(typeof helle[i] !== "undefined") {
          const e0 = helle[i - 1];
          const e1 = helle[i];
          e = x0 - e0.gameNumber > e1.gameNumber - x0 ? e1 : e0;
          xPos2 = x(e.gameNumber);
          yPos2 = y(e.totalSavePercentage);
          
          circle2.attr("cx", xPos2)
          .attr("cy", yPos2)
          
          circle2.transition()
            .duration(50)
            .attr("r", 5);
        } else {
          circle2.transition()
          .duration(50)
          .attr("r", 0);
        }

        const tootipHTML = (d,e) => {
          // return `<div>Game:${e.gameNumber}</div> `;
          // console.log(d,e)
          
          // <div>Game #: ${d.gameNumber}</div>
          // <div>SV%: ${d.totalSavePercentage}</div>
          // <div class="opponent">VS: ${d.opponent}</div>
          // <div class="date">Date: ${d.date}</div>
          // <div class="shotsAgainst">Shots Against: ${d.shotsAgainst}</div>
          // <div class="goalsAgainst">Goals Against: ${d.goalsAgainst}</div>
          // </div>
          
          return `
          <div class="montreal left-team">
            <div class="tooltip-container">
              <div class="winnipeg  right-team">
                <div>Game #: ${e.gameNumber}</div>
                <div>SV%: ${e.totalSavePercentage}</div>
                <div class="opponent">VS: ${e.opponent}</div>
                <div class="date">Date: ${e.date}</div>
                <div class="shotsAgainst">Shots Against: ${e.shotsAgainst}</div>
                <div class="goalsAgainst">Goals Against: ${e.goalsAgainst}</div>
              </div>
            </div>
            `
        }

        // add tooltip
        tooltip
          .style("display", "block")
          .style("left", `${xPos + 100}px`)
          // .style("left", `${xPos + 250}px`)
          .style("top", `${yPos + 50}px`)
          .html(tootipHTML(d,e))
          })

      listeningRect.on("mouseleave", function() {
        circle.transition()
          .duration(50)
          .attr("r", 0);
        
        circle2.transition()
          .duration(50)
          .attr("r", 0);

        tooltip.style("display", "none");
      })
    }
    catch (error) {
      console.error(error);
    }

  })();

</script>
